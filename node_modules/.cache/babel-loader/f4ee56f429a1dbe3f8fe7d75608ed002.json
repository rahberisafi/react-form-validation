{"ast":null,"code":"const validateEmail = email => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n};\n\nexport default ((fields, submit = false) => {\n  let errors = {};\n\n  for (let field in fields) {\n    if (submit) {\n      fields[field].touched = true;\n    }\n\n    const currentField = fields[field];\n\n    if (currentField.required && (currentField.value === '' || !currentField.value) && currentField.touched) {\n      errors[field] = currentField.requiredMessage ? currentField.requiredMessage : 'This field is required!';\n    }\n\n    if (currentField.file && currentField.required && Object.keys(currentField.value).length === 0 && currentField.touched) {\n      errors[field] = currentField.requiredMessage ? currentField.requiredMessage : 'This field is required!';\n    }\n\n    if (!errors[field] && currentField.email && !validateEmail(currentField.value) && currentField.touched) {\n      errors[field] = currentField.emailMessage ? currentField.emailMessage : 'Invalid email address!';\n    }\n\n    if (!errors[field] && currentField.matchWith && currentField.value !== fields[currentField.matchWith].value && currentField.touched) {\n      errors[field] = currentField.matchWithMessage ? currentField.matchWithMessage : 'Fields values are not equal!';\n    }\n\n    if (!errors[field] && currentField.minLength && currentField.value !== '' && currentField.value.length < currentField.minLength && currentField.touched) {\n      errors[field] = currentField.minLengthMessage ? currentField.minLengthMessage : `This field must have at least ${currentField.minLength} characters`;\n    }\n\n    if (!errors[field] && currentField.maxLength && currentField.value !== '' && currentField.value.length > currentField.maxLength && currentField.touched) {\n      errors[field] = currentField.maxLengthMessage ? currentField.maxLengthMessage : `This field must have less than ${currentField.maxLength} characters`;\n    }\n\n    if (!errors[field] && currentField.file && currentField.touched && currentField.allowedTypes && !currentField.allowedTypes.includes(currentField.value[0].type.split('/')[1])) {\n      errors[field] = currentField.allowedTypesMessage ? currentField.allowedTypesMessage : 'Invalid file type!';\n    }\n\n    if (!errors[field] && currentField.file && currentField.touched && currentField.maxFileSize && currentField.maxFileSize * 1024 < Math.round(currentField.value[0].size)) {\n      errors[field] = currentField.maxFileSizeMessage ? currentField.maxFileSizeMessage : `File is too large(${Math.round(currentField.value[0].size / 1024)}KB), it cannot be larger than ${currentField.maxFileSize}KB`;\n    }\n  }\n\n  return errors;\n});","map":{"version":3,"sources":["/home/isafi/ReactPro/react-all/jan2022/react-form/src/utils/validate.js"],"names":["validateEmail","email","re","test","fields","submit","errors","field","touched","currentField","required","value","requiredMessage","file","Object","keys","length","emailMessage","matchWith","matchWithMessage","minLength","minLengthMessage","maxLength","maxLengthMessage","allowedTypes","includes","type","split","allowedTypesMessage","maxFileSize","Math","round","size","maxFileSizeMessage"],"mappings":"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","sourcesContent":["const validateEmail = email => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n}\n\nexport default (fields, submit = false) => {\n  let errors = {};\n\n  for(let field in fields) {\n    if(submit) {\n      fields[field].touched = true;\n    }\n\n    const currentField = fields[field];\n\n    if(currentField.required && (currentField.value === '' || !currentField.value) && currentField.touched) {\n      errors[field] = currentField.requiredMessage ? currentField.requiredMessage : 'This field is required!';\n    }\n\n    if(currentField.file && currentField.required && Object.keys(currentField.value).length === 0 && currentField.touched) {\n      errors[field] = currentField.requiredMessage ? currentField.requiredMessage : 'This field is required!';\n    }\n\n    if(!errors[field] && currentField.email && !validateEmail(currentField.value) && currentField.touched) {\n      errors[field] = currentField.emailMessage ? currentField.emailMessage : 'Invalid email address!';\n    }\n\n    if(!errors[field] && currentField.matchWith && currentField.value !== fields[currentField.matchWith].value && currentField.touched) {\n      errors[field] = currentField.matchWithMessage ? currentField.matchWithMessage : 'Fields values are not equal!';\n    }\n\n    if(!errors[field] && currentField.minLength && currentField.value !== '' && currentField.value.length < currentField.minLength && currentField.touched) {\n      errors[field] = currentField.minLengthMessage ? currentField.minLengthMessage : `This field must have at least ${currentField.minLength} characters`;\n    }\n\n    if(!errors[field] && currentField.maxLength && currentField.value !== '' && currentField.value.length > currentField.maxLength && currentField.touched) {\n      errors[field] = currentField.maxLengthMessage ? currentField.maxLengthMessage : `This field must have less than ${currentField.maxLength} characters`;\n    }\n\n    if(!errors[field] && currentField.file && currentField.touched && currentField.allowedTypes && !currentField.allowedTypes.includes(currentField.value[0].type.split('/')[1])) {\n      errors[field] = currentField.allowedTypesMessage ? currentField.allowedTypesMessage : 'Invalid file type!';\n    }\n\n    if(!errors[field] && currentField.file && currentField.touched && currentField.maxFileSize && (currentField.maxFileSize * 1024) < Math.round(currentField.value[0].size)) {\n      errors[field] = currentField.maxFileSizeMessage ? currentField.maxFileSizeMessage : `File is too large(${Math.round(currentField.value[0].size / 1024)}KB), it cannot be larger than ${currentField.maxFileSize}KB`;\n    }\n  }\n\n  return errors;\n}"]},"metadata":{},"sourceType":"module"}